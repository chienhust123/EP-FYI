syntax = "proto3";

package offer_core_service.v1;

import "validate/validate.proto";

service OfferCoreService {
    // Create a new offer image entry in the database, and returns a S3 presigned URL that can be used by the client to
    // upload an image, which can be associated with an offer in the future.
    rpc CreateOfferImage(CreateOfferImageRequest) returns (CreateOfferImageResponse) {}
    // Create a new offer entry in the database.
    rpc CreateOffer(CreateOfferRequest) returns (CreateOfferResponse) {}
    // Update the status of an offer entry in the database.
    //
    // The requesting client's email address must be in the whitelisted list in the config for the request to be authorized.
    rpc UpdateOfferStatus(UpdateOfferStatusRequest) returns (UpdateOfferStatusResponse) {}
    // Get an offer entry from the database.
    //
    // If the requested offer's status is not `APPROVED`, the requesting client's email address must be in the whitelisted
    // list in the config for the request to be authorized.
    rpc GetOffer(GetOfferRequest) returns (GetOfferResponse) {}
    // Get the list of offer entrys from the database that match the provided filter options.
    //
    // If the request try to filter for orders with non-`APPROVED` statuses, the requesting client's email address must be
    // in the whitelisted list in the config for the request to be authorized.
    rpc GetOfferList(GetOfferListRequest) returns (GetOfferListResponse) {}
}

message OfferStatus {
    enum Value {
        // Default status value.
        VALUE_UNSPECIFIED = 0;
        // Status representing a newly created offer.
        VALUE_UPLOADED = 1;
        // Status representing an approved offer, ready to be displayed on the public API and included in the aggregated result.
        VALUE_APPROVED = 2;
        // Status representing a disapporved offer, not to be displayed on the public API and included in the aggregated result.
        VALUE_DISAPPROVED = 3;
    }
}

message Company {
    uint64 id = 1;
    string name = 2 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$",
    }];
    string profile_image_url = 3 [(validate.rules).string = {
        uri: true,
    }];
}

message Location {
    uint64 id = 1;
    // The 2-letter ISO country code of the country of the location.
    string country = 2 [(validate.rules).string = {
        pattern: "^[A-Z]{2}$",
    }];
    // Optional, the name of the state of the location.
    string state = 3 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$",
    }];
    // The name of the city of the location.
    string city = 4 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
    }];
}

message Position {
    uint64 id = 1;
    // The title of the position - for example, Software Engineer, Senior Software Engineer, etc...
    string title = 2 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$",
    }];
    // Optional, the level code of the position - for example, L3, L4, etc...
    string code = 3 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$",
    }];
}

message MonetaryValue {
    // The amount of the monetary value, represented in the Inflated Integer format with multiplier of 10^5.
    uint64 amount = 1;
    // The 3-letter ISO currency code of the currency denoting the monetary value.
    string currency = 2 [(validate.rules).string = {
        pattern: "^[A-Z]{3}$",
    }];
}

message OfferImage {
    uint64 id = 1;
    string url = 2; 
}

message Offer {
    uint64 id = 1;
    Company company = 2;
    Location location = 3;
    Position position = 4;
    MonetaryValue total_package = 5;
    OfferImage image = 6;
    OfferStatus.Value status = 7;
    uint64 created_time = 8;
}

// Filter options when listing offers.
message OfferListFilterOptions {
    // The list of company IDs where the offers were extended from. Offer must belong to one of the provided company IDs.
    repeated uint64 company_id_list = 1 [(validate.rules).repeated = {
        max_items: 10,
    }];
    // The list of country names where the offers were extended from. Offer must belong to one of the provided countries.
    repeated string country_list = 2 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of state names where the offers were extended from. Offer must belong to one of the provided states.
    repeated string state_list = 3 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of city names where the offers were extended from. Offer must belong to one of the provided cities.
    repeated string city_list = 4 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of position titles of the requested offers. Offer must match one of the provided title using full-text index search.
    repeated string position_title_list = 5 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}",
            },
        },
    }];
    // The list of position level codes of the requested offers. Offer must match one of the provided level codes.
    repeated string position_level_list = 6 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of statuses the offer must be in. Any users can filter for offers with APPROVED status, but only whitelisted users can filter for offer of other statuses.
    repeated OfferStatus.Value status_list = 7 [(validate.rules).repeated = {
        max_items: 10,
    }];
}

message OfferListSortOrder {
    enum Value {
        VALUE_UNSPECIFIED = 0;
        // Sort offer by ascending created time first, ascending ID second.
        VALUE_CREATED_TIME_ASCENDING = 1;
        // Sort offer by descending created time first, descending ID second.
        VALUE_CREATED_TIME_DESCENDING = 2;
        // Sort offer by ascending company name first, ascending ID second.
        VALUE_COMPANY_ASCENDING = 3;
        // Sort offer by descending company name first, descending ID second.
        VALUE_COMPANY_DESCENDING = 4;
        // Sort offer by ascending country first, then ascending state, ascending city and ascending ID.
        VALUE_LOCATION_ASCENDING = 5;
        // Sort offer by descending country first, then descending state, descending city and descending ID.
        VALUE_LOCATION_DESCENDING = 6;
        // Sort offer by ascending position name first, ascending ID second.
        VALUE_POSITION_ASCENDING = 7;
        // Sort offer by descending position name first, descending ID second.
        VALUE_POSITION_DESCENDING = 8;
        // Sort offer by ascending currency name first, ascending amount second and aseconding ID last.
        VALUE_TOTAL_PACKAGE_ASCENDING = 9;
        // Sort offer by descending currency name first, descending amount second and descending ID last.
        VALUE_TOTAL_PACKAGE_DESCENDING = 10;
    }
}

message CreateOfferImageRequest {}

message CreateOfferImageResponse {
    OfferImage image = 1;
}

message CreateOfferRequest {
    // If the company ID is provided and exists inside the database, the newly created offer will be associated to that company.
    // Otherwise, if the company name is provided, Offer Core Service will try to match it with an existing company inside the database.
    // If none is found, then a new company record is created inside the database.
    Company company = 1;
    // If the location ID is provided and exists inside the database, the newly created offer will be associated to that location.
    // Otherwise, Offer Core Service will try to match the location's country, state and city with an existing location inside the database.
    // If none is found, then a new location record is created inside the database.
    Location location = 2;
    // If the position ID is provided and exists inside the database, the newly created offer will be associated to that position.
    // Otherwise, Offer Core Service will try to match the position's title and level with an existing position inside the database.
    // If none is found, then a new position record is created inside the database.
    Position position = 3;
    MonetaryValue total_package = 4;
    // Must be an image ID returned by the CreateOfferImage API, and the presigned URL associated with that image inside our database must
    // have an image uploaded to it.
    uint64 image_id = 5;
}

message CreateOfferResponse {
    Offer offer = 1;
}

message UpdateOfferStatusRequest {
    uint64 id = 1;
    OfferStatus.Value status = 6;
}

message UpdateOfferStatusResponse {}

message GetOfferRequest {
    uint64 id = 1;
}

message GetOfferResponse {
    Offer offer = 1;
}

message GetOfferListRequest {
    OfferListFilterOptions filter_options = 1;
    OfferListSortOrder.Value sort_order = 2;
    uint64 offset = 3;
    uint64 limit = 4 [(validate.rules).uint64 = {
        lte: 100,
    }];
}

message GetOfferListResponse {
    repeated Offer offer_list = 1;
    uint64 total_offer_count = 2;
}