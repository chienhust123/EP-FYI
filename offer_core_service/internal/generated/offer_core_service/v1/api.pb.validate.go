// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: offer_core_service/v1/api.proto

package offer_core_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OfferStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferStatusMultiError, or
// nil if none found.
func (m *OfferStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OfferStatusMultiError(errors)
	}

	return nil
}

// OfferStatusMultiError is an error wrapping multiple validation errors
// returned by OfferStatus.ValidateAll() if the designated constraints aren't met.
type OfferStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferStatusMultiError) AllErrors() []error { return m }

// OfferStatusValidationError is the validation error returned by
// OfferStatus.Validate if the designated constraints aren't met.
type OfferStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferStatusValidationError) ErrorName() string { return "OfferStatusValidationError" }

// Error satisfies the builtin error interface
func (e OfferStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferStatusValidationError{}

// Validate checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CompanyMultiError, or nil if none found.
func (m *Company) ValidateAll() error {
	return m.validate(true)
}

func (m *Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Company_Name_Pattern.MatchString(m.GetName()) {
		err := CompanyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetProfileImageUrl()); err != nil {
		err = CompanyValidationError{
			field:  "ProfileImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CompanyValidationError{
			field:  "ProfileImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyMultiError(errors)
	}

	return nil
}

// CompanyMultiError is an error wrapping multiple validation errors returned
// by Company.ValidateAll() if the designated constraints aren't met.
type CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyMultiError) AllErrors() []error { return m }

// CompanyValidationError is the validation error returned by Company.Validate
// if the designated constraints aren't met.
type CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyValidationError) ErrorName() string { return "CompanyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyValidationError{}

var _Company_Name_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$")

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Location_Country_Pattern.MatchString(m.GetCountry()) {
		err := LocationValidationError{
			field:  "Country",
			reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Location_State_Pattern.MatchString(m.GetState()) {
		err := LocationValidationError{
			field:  "State",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{0,64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Location_City_Pattern.MatchString(m.GetCity()) {
		err := LocationValidationError{
			field:  "City",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

var _Location_Country_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _Location_State_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$")

var _Location_City_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

// Validate checks the field values on Position with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Position) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Position with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositionMultiError, or nil
// if none found.
func (m *Position) ValidateAll() error {
	return m.validate(true)
}

func (m *Position) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Position_Title_Pattern.MatchString(m.GetTitle()) {
		err := PositionValidationError{
			field:  "Title",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Position_Code_Pattern.MatchString(m.GetCode()) {
		err := PositionValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{0,64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PositionMultiError(errors)
	}

	return nil
}

// PositionMultiError is an error wrapping multiple validation errors returned
// by Position.ValidateAll() if the designated constraints aren't met.
type PositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionMultiError) AllErrors() []error { return m }

// PositionValidationError is the validation error returned by
// Position.Validate if the designated constraints aren't met.
type PositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionValidationError) ErrorName() string { return "PositionValidationError" }

// Error satisfies the builtin error interface
func (e PositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionValidationError{}

var _Position_Title_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$")

var _Position_Code_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$")

// Validate checks the field values on MonetaryValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonetaryValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonetaryValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonetaryValueMultiError, or
// nil if none found.
func (m *MonetaryValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MonetaryValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if !_MonetaryValue_Currency_Pattern.MatchString(m.GetCurrency()) {
		err := MonetaryValueValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[A-Z]{3}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MonetaryValueMultiError(errors)
	}

	return nil
}

// MonetaryValueMultiError is an error wrapping multiple validation errors
// returned by MonetaryValue.ValidateAll() if the designated constraints
// aren't met.
type MonetaryValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonetaryValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonetaryValueMultiError) AllErrors() []error { return m }

// MonetaryValueValidationError is the validation error returned by
// MonetaryValue.Validate if the designated constraints aren't met.
type MonetaryValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonetaryValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonetaryValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonetaryValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonetaryValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonetaryValueValidationError) ErrorName() string { return "MonetaryValueValidationError" }

// Error satisfies the builtin error interface
func (e MonetaryValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonetaryValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonetaryValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonetaryValueValidationError{}

var _MonetaryValue_Currency_Pattern = regexp.MustCompile("^[A-Z]{3}$")

// Validate checks the field values on OfferImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferImageMultiError, or
// nil if none found.
func (m *OfferImage) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	if len(errors) > 0 {
		return OfferImageMultiError(errors)
	}

	return nil
}

// OfferImageMultiError is an error wrapping multiple validation errors
// returned by OfferImage.ValidateAll() if the designated constraints aren't met.
type OfferImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferImageMultiError) AllErrors() []error { return m }

// OfferImageValidationError is the validation error returned by
// OfferImage.Validate if the designated constraints aren't met.
type OfferImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferImageValidationError) ErrorName() string { return "OfferImageValidationError" }

// Error satisfies the builtin error interface
func (e OfferImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferImageValidationError{}

// Validate checks the field values on Offer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Offer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Offer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OfferMultiError, or nil if none found.
func (m *Offer) ValidateAll() error {
	return m.validate(true)
}

func (m *Offer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "TotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for CreatedTime

	if len(errors) > 0 {
		return OfferMultiError(errors)
	}

	return nil
}

// OfferMultiError is an error wrapping multiple validation errors returned by
// Offer.ValidateAll() if the designated constraints aren't met.
type OfferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferMultiError) AllErrors() []error { return m }

// OfferValidationError is the validation error returned by Offer.Validate if
// the designated constraints aren't met.
type OfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferValidationError) ErrorName() string { return "OfferValidationError" }

// Error satisfies the builtin error interface
func (e OfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferValidationError{}

// Validate checks the field values on OfferListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfferListFilterOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfferListFilterOptionsMultiError, or nil if none found.
func (m *OfferListFilterOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferListFilterOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCompanyIdList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CompanyIdList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCountryList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CountryList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCountryList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_CountryList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("CountryList[%v]", idx),
				reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetStateList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "StateList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetStateList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_StateList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("StateList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetCityList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CityList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCityList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_CityList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("CityList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionTitleList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "PositionTitleList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionTitleList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_PositionTitleList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("PositionTitleList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionLevelList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "PositionLevelList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionLevelList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_PositionLevelList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("PositionLevelList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetStatusList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "StatusList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OfferListFilterOptionsMultiError(errors)
	}

	return nil
}

// OfferListFilterOptionsMultiError is an error wrapping multiple validation
// errors returned by OfferListFilterOptions.ValidateAll() if the designated
// constraints aren't met.
type OfferListFilterOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferListFilterOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferListFilterOptionsMultiError) AllErrors() []error { return m }

// OfferListFilterOptionsValidationError is the validation error returned by
// OfferListFilterOptions.Validate if the designated constraints aren't met.
type OfferListFilterOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferListFilterOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferListFilterOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferListFilterOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferListFilterOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferListFilterOptionsValidationError) ErrorName() string {
	return "OfferListFilterOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e OfferListFilterOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferListFilterOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferListFilterOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferListFilterOptionsValidationError{}

var _OfferListFilterOptions_CountryList_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _OfferListFilterOptions_StateList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _OfferListFilterOptions_CityList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _OfferListFilterOptions_PositionTitleList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}")

var _OfferListFilterOptions_PositionLevelList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

// Validate checks the field values on OfferListSortOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfferListSortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferListSortOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfferListSortOrderMultiError, or nil if none found.
func (m *OfferListSortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferListSortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OfferListSortOrderMultiError(errors)
	}

	return nil
}

// OfferListSortOrderMultiError is an error wrapping multiple validation errors
// returned by OfferListSortOrder.ValidateAll() if the designated constraints
// aren't met.
type OfferListSortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferListSortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferListSortOrderMultiError) AllErrors() []error { return m }

// OfferListSortOrderValidationError is the validation error returned by
// OfferListSortOrder.Validate if the designated constraints aren't met.
type OfferListSortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferListSortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferListSortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferListSortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferListSortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferListSortOrderValidationError) ErrorName() string {
	return "OfferListSortOrderValidationError"
}

// Error satisfies the builtin error interface
func (e OfferListSortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferListSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferListSortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferListSortOrderValidationError{}

// Validate checks the field values on CreateOfferImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferImageRequestMultiError, or nil if none found.
func (m *CreateOfferImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOfferImageRequestMultiError(errors)
	}

	return nil
}

// CreateOfferImageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOfferImageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferImageRequestMultiError) AllErrors() []error { return m }

// CreateOfferImageRequestValidationError is the validation error returned by
// CreateOfferImageRequest.Validate if the designated constraints aren't met.
type CreateOfferImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferImageRequestValidationError) ErrorName() string {
	return "CreateOfferImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferImageRequestValidationError{}

// Validate checks the field values on CreateOfferImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferImageResponseMultiError, or nil if none found.
func (m *CreateOfferImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferImageResponseValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOfferImageResponseMultiError(errors)
	}

	return nil
}

// CreateOfferImageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfferImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferImageResponseMultiError) AllErrors() []error { return m }

// CreateOfferImageResponseValidationError is the validation error returned by
// CreateOfferImageResponse.Validate if the designated constraints aren't met.
type CreateOfferImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferImageResponseValidationError) ErrorName() string {
	return "CreateOfferImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferImageResponseValidationError{}

// Validate checks the field values on CreateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferRequestMultiError, or nil if none found.
func (m *CreateOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "TotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ImageId

	if len(errors) > 0 {
		return CreateOfferRequestMultiError(errors)
	}

	return nil
}

// CreateOfferRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferRequestMultiError) AllErrors() []error { return m }

// CreateOfferRequestValidationError is the validation error returned by
// CreateOfferRequest.Validate if the designated constraints aren't met.
type CreateOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferRequestValidationError) ErrorName() string {
	return "CreateOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferRequestValidationError{}

// Validate checks the field values on CreateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferResponseMultiError, or nil if none found.
func (m *CreateOfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOfferResponseMultiError(errors)
	}

	return nil
}

// CreateOfferResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfferResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferResponseMultiError) AllErrors() []error { return m }

// CreateOfferResponseValidationError is the validation error returned by
// CreateOfferResponse.Validate if the designated constraints aren't met.
type CreateOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferResponseValidationError) ErrorName() string {
	return "CreateOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferResponseValidationError{}

// Validate checks the field values on UpdateOfferStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfferStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfferStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfferStatusRequestMultiError, or nil if none found.
func (m *UpdateOfferStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfferStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOfferStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateOfferStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOfferStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOfferStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfferStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfferStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOfferStatusRequestValidationError is the validation error returned by
// UpdateOfferStatusRequest.Validate if the designated constraints aren't met.
type UpdateOfferStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferStatusRequestValidationError) ErrorName() string {
	return "UpdateOfferStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferStatusRequestValidationError{}

// Validate checks the field values on UpdateOfferStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfferStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfferStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfferStatusResponseMultiError, or nil if none found.
func (m *UpdateOfferStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfferStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOfferStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateOfferStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOfferStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateOfferStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfferStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfferStatusResponseMultiError) AllErrors() []error { return m }

// UpdateOfferStatusResponseValidationError is the validation error returned by
// UpdateOfferStatusResponse.Validate if the designated constraints aren't met.
type UpdateOfferStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferStatusResponseValidationError) ErrorName() string {
	return "UpdateOfferStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferStatusResponseValidationError{}

// Validate checks the field values on GetOfferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferRequestMultiError, or nil if none found.
func (m *GetOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOfferRequestMultiError(errors)
	}

	return nil
}

// GetOfferRequestMultiError is an error wrapping multiple validation errors
// returned by GetOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferRequestMultiError) AllErrors() []error { return m }

// GetOfferRequestValidationError is the validation error returned by
// GetOfferRequest.Validate if the designated constraints aren't met.
type GetOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferRequestValidationError) ErrorName() string { return "GetOfferRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferRequestValidationError{}

// Validate checks the field values on GetOfferResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferResponseMultiError, or nil if none found.
func (m *GetOfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOfferResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOfferResponseMultiError(errors)
	}

	return nil
}

// GetOfferResponseMultiError is an error wrapping multiple validation errors
// returned by GetOfferResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferResponseMultiError) AllErrors() []error { return m }

// GetOfferResponseValidationError is the validation error returned by
// GetOfferResponse.Validate if the designated constraints aren't met.
type GetOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferResponseValidationError) ErrorName() string { return "GetOfferResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferResponseValidationError{}

// Validate checks the field values on GetOfferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfferListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferListRequestMultiError, or nil if none found.
func (m *GetOfferListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilterOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOfferListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOfferListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOfferListRequestValidationError{
				field:  "FilterOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortOrder

	// no validation rules for Offset

	if m.GetLimit() > 100 {
		err := GetOfferListRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOfferListRequestMultiError(errors)
	}

	return nil
}

// GetOfferListRequestMultiError is an error wrapping multiple validation
// errors returned by GetOfferListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOfferListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferListRequestMultiError) AllErrors() []error { return m }

// GetOfferListRequestValidationError is the validation error returned by
// GetOfferListRequest.Validate if the designated constraints aren't met.
type GetOfferListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferListRequestValidationError) ErrorName() string {
	return "GetOfferListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfferListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferListRequestValidationError{}

// Validate checks the field values on GetOfferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfferListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferListResponseMultiError, or nil if none found.
func (m *GetOfferListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOfferList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOfferListResponseValidationError{
						field:  fmt.Sprintf("OfferList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOfferListResponseValidationError{
						field:  fmt.Sprintf("OfferList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOfferListResponseValidationError{
					field:  fmt.Sprintf("OfferList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalOfferCount

	if len(errors) > 0 {
		return GetOfferListResponseMultiError(errors)
	}

	return nil
}

// GetOfferListResponseMultiError is an error wrapping multiple validation
// errors returned by GetOfferListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOfferListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferListResponseMultiError) AllErrors() []error { return m }

// GetOfferListResponseValidationError is the validation error returned by
// GetOfferListResponse.Validate if the designated constraints aren't met.
type GetOfferListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferListResponseValidationError) ErrorName() string {
	return "GetOfferListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfferListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferListResponseValidationError{}
