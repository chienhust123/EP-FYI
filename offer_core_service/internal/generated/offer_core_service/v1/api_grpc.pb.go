// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: offer_core_service/v1/api.proto

package offer_core_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OfferCoreService_CreateOfferImage_FullMethodName  = "/offer_core_service.v1.OfferCoreService/CreateOfferImage"
	OfferCoreService_CreateOffer_FullMethodName       = "/offer_core_service.v1.OfferCoreService/CreateOffer"
	OfferCoreService_UpdateOfferStatus_FullMethodName = "/offer_core_service.v1.OfferCoreService/UpdateOfferStatus"
	OfferCoreService_GetOffer_FullMethodName          = "/offer_core_service.v1.OfferCoreService/GetOffer"
	OfferCoreService_GetOfferList_FullMethodName      = "/offer_core_service.v1.OfferCoreService/GetOfferList"
)

// OfferCoreServiceClient is the client API for OfferCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferCoreServiceClient interface {
	// Create a new offer image entry in the database, and returns a S3 presigned URL that can be used by the client to
	// upload an image, which can be associated with an offer in the future.
	CreateOfferImage(ctx context.Context, in *CreateOfferImageRequest, opts ...grpc.CallOption) (*CreateOfferImageResponse, error)
	// Create a new offer entry in the database.
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error)
	// Update the status of an offer entry in the database.
	//
	// The requesting client's email address must be in the whitelisted list in the config for the request to be authorized.
	UpdateOfferStatus(ctx context.Context, in *UpdateOfferStatusRequest, opts ...grpc.CallOption) (*UpdateOfferStatusResponse, error)
	// Get an offer entry from the database.
	//
	// If the requested offer's status is not `APPROVED`, the requesting client's email address must be in the whitelisted
	// list in the config for the request to be authorized.
	GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error)
	// Get the list of offer entrys from the database that match the provided filter options.
	//
	// If the request try to filter for orders with non-`APPROVED` statuses, the requesting client's email address must be
	// in the whitelisted list in the config for the request to be authorized.
	GetOfferList(ctx context.Context, in *GetOfferListRequest, opts ...grpc.CallOption) (*GetOfferListResponse, error)
}

type offerCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferCoreServiceClient(cc grpc.ClientConnInterface) OfferCoreServiceClient {
	return &offerCoreServiceClient{cc}
}

func (c *offerCoreServiceClient) CreateOfferImage(ctx context.Context, in *CreateOfferImageRequest, opts ...grpc.CallOption) (*CreateOfferImageResponse, error) {
	out := new(CreateOfferImageResponse)
	err := c.cc.Invoke(ctx, OfferCoreService_CreateOfferImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerCoreServiceClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error) {
	out := new(CreateOfferResponse)
	err := c.cc.Invoke(ctx, OfferCoreService_CreateOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerCoreServiceClient) UpdateOfferStatus(ctx context.Context, in *UpdateOfferStatusRequest, opts ...grpc.CallOption) (*UpdateOfferStatusResponse, error) {
	out := new(UpdateOfferStatusResponse)
	err := c.cc.Invoke(ctx, OfferCoreService_UpdateOfferStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerCoreServiceClient) GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error) {
	out := new(GetOfferResponse)
	err := c.cc.Invoke(ctx, OfferCoreService_GetOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerCoreServiceClient) GetOfferList(ctx context.Context, in *GetOfferListRequest, opts ...grpc.CallOption) (*GetOfferListResponse, error) {
	out := new(GetOfferListResponse)
	err := c.cc.Invoke(ctx, OfferCoreService_GetOfferList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferCoreServiceServer is the server API for OfferCoreService service.
// All implementations must embed UnimplementedOfferCoreServiceServer
// for forward compatibility
type OfferCoreServiceServer interface {
	// Create a new offer image entry in the database, and returns a S3 presigned URL that can be used by the client to
	// upload an image, which can be associated with an offer in the future.
	CreateOfferImage(context.Context, *CreateOfferImageRequest) (*CreateOfferImageResponse, error)
	// Create a new offer entry in the database.
	CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error)
	// Update the status of an offer entry in the database.
	//
	// The requesting client's email address must be in the whitelisted list in the config for the request to be authorized.
	UpdateOfferStatus(context.Context, *UpdateOfferStatusRequest) (*UpdateOfferStatusResponse, error)
	// Get an offer entry from the database.
	//
	// If the requested offer's status is not `APPROVED`, the requesting client's email address must be in the whitelisted
	// list in the config for the request to be authorized.
	GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error)
	// Get the list of offer entrys from the database that match the provided filter options.
	//
	// If the request try to filter for orders with non-`APPROVED` statuses, the requesting client's email address must be
	// in the whitelisted list in the config for the request to be authorized.
	GetOfferList(context.Context, *GetOfferListRequest) (*GetOfferListResponse, error)
	mustEmbedUnimplementedOfferCoreServiceServer()
}

// UnimplementedOfferCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfferCoreServiceServer struct {
}

func (UnimplementedOfferCoreServiceServer) CreateOfferImage(context.Context, *CreateOfferImageRequest) (*CreateOfferImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOfferImage not implemented")
}
func (UnimplementedOfferCoreServiceServer) CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedOfferCoreServiceServer) UpdateOfferStatus(context.Context, *UpdateOfferStatusRequest) (*UpdateOfferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfferStatus not implemented")
}
func (UnimplementedOfferCoreServiceServer) GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedOfferCoreServiceServer) GetOfferList(context.Context, *GetOfferListRequest) (*GetOfferListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferList not implemented")
}
func (UnimplementedOfferCoreServiceServer) mustEmbedUnimplementedOfferCoreServiceServer() {}

// UnsafeOfferCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferCoreServiceServer will
// result in compilation errors.
type UnsafeOfferCoreServiceServer interface {
	mustEmbedUnimplementedOfferCoreServiceServer()
}

func RegisterOfferCoreServiceServer(s grpc.ServiceRegistrar, srv OfferCoreServiceServer) {
	s.RegisterService(&OfferCoreService_ServiceDesc, srv)
}

func _OfferCoreService_CreateOfferImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferCoreServiceServer).CreateOfferImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferCoreService_CreateOfferImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferCoreServiceServer).CreateOfferImage(ctx, req.(*CreateOfferImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferCoreService_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferCoreServiceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferCoreService_CreateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferCoreServiceServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferCoreService_UpdateOfferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferCoreServiceServer).UpdateOfferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferCoreService_UpdateOfferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferCoreServiceServer).UpdateOfferStatus(ctx, req.(*UpdateOfferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferCoreService_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferCoreServiceServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferCoreService_GetOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferCoreServiceServer).GetOffer(ctx, req.(*GetOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferCoreService_GetOfferList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferCoreServiceServer).GetOfferList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferCoreService_GetOfferList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferCoreServiceServer).GetOfferList(ctx, req.(*GetOfferListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfferCoreService_ServiceDesc is the grpc.ServiceDesc for OfferCoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfferCoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offer_core_service.v1.OfferCoreService",
	HandlerType: (*OfferCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOfferImage",
			Handler:    _OfferCoreService_CreateOfferImage_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _OfferCoreService_CreateOffer_Handler,
		},
		{
			MethodName: "UpdateOfferStatus",
			Handler:    _OfferCoreService_UpdateOfferStatus_Handler,
		},
		{
			MethodName: "GetOffer",
			Handler:    _OfferCoreService_GetOffer_Handler,
		},
		{
			MethodName: "GetOfferList",
			Handler:    _OfferCoreService_GetOfferList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offer_core_service/v1/api.proto",
}
