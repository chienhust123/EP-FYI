// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: offer_aggregator_service/v1/api.proto

package offer_aggregator_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OfferAggregatorService_GetAggregatedCompanyStatsList_FullMethodName       = "/offer_aggregator_service.v1.OfferAggregatorService/GetAggregatedCompanyStatsList"
	OfferAggregatorService_SearchAggregatedCompanyStatsList_FullMethodName    = "/offer_aggregator_service.v1.OfferAggregatorService/SearchAggregatedCompanyStatsList"
	OfferAggregatorService_GetCompanyAggregatedOfferStatsLists_FullMethodName = "/offer_aggregator_service.v1.OfferAggregatorService/GetCompanyAggregatedOfferStatsLists"
)

// OfferAggregatorServiceClient is the client API for OfferAggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferAggregatorServiceClient interface {
	GetAggregatedCompanyStatsList(ctx context.Context, in *GetAggregatedCompanyStatsListRequest, opts ...grpc.CallOption) (*GetAggregatedCompanyStatsListResponse, error)
	SearchAggregatedCompanyStatsList(ctx context.Context, in *SearchAggregatedCompanyStatsListRequest, opts ...grpc.CallOption) (*SearchAggregatedCompanyStatsListResponse, error)
	GetCompanyAggregatedOfferStatsLists(ctx context.Context, in *GetCompanyAggregatedOfferStatsListsRequest, opts ...grpc.CallOption) (*GetCompanyAggregatedOfferStatsListsResponse, error)
}

type offerAggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferAggregatorServiceClient(cc grpc.ClientConnInterface) OfferAggregatorServiceClient {
	return &offerAggregatorServiceClient{cc}
}

func (c *offerAggregatorServiceClient) GetAggregatedCompanyStatsList(ctx context.Context, in *GetAggregatedCompanyStatsListRequest, opts ...grpc.CallOption) (*GetAggregatedCompanyStatsListResponse, error) {
	out := new(GetAggregatedCompanyStatsListResponse)
	err := c.cc.Invoke(ctx, OfferAggregatorService_GetAggregatedCompanyStatsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerAggregatorServiceClient) SearchAggregatedCompanyStatsList(ctx context.Context, in *SearchAggregatedCompanyStatsListRequest, opts ...grpc.CallOption) (*SearchAggregatedCompanyStatsListResponse, error) {
	out := new(SearchAggregatedCompanyStatsListResponse)
	err := c.cc.Invoke(ctx, OfferAggregatorService_SearchAggregatedCompanyStatsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerAggregatorServiceClient) GetCompanyAggregatedOfferStatsLists(ctx context.Context, in *GetCompanyAggregatedOfferStatsListsRequest, opts ...grpc.CallOption) (*GetCompanyAggregatedOfferStatsListsResponse, error) {
	out := new(GetCompanyAggregatedOfferStatsListsResponse)
	err := c.cc.Invoke(ctx, OfferAggregatorService_GetCompanyAggregatedOfferStatsLists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferAggregatorServiceServer is the server API for OfferAggregatorService service.
// All implementations must embed UnimplementedOfferAggregatorServiceServer
// for forward compatibility
type OfferAggregatorServiceServer interface {
	GetAggregatedCompanyStatsList(context.Context, *GetAggregatedCompanyStatsListRequest) (*GetAggregatedCompanyStatsListResponse, error)
	SearchAggregatedCompanyStatsList(context.Context, *SearchAggregatedCompanyStatsListRequest) (*SearchAggregatedCompanyStatsListResponse, error)
	GetCompanyAggregatedOfferStatsLists(context.Context, *GetCompanyAggregatedOfferStatsListsRequest) (*GetCompanyAggregatedOfferStatsListsResponse, error)
	mustEmbedUnimplementedOfferAggregatorServiceServer()
}

// UnimplementedOfferAggregatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfferAggregatorServiceServer struct {
}

func (UnimplementedOfferAggregatorServiceServer) GetAggregatedCompanyStatsList(context.Context, *GetAggregatedCompanyStatsListRequest) (*GetAggregatedCompanyStatsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCompanyStatsList not implemented")
}
func (UnimplementedOfferAggregatorServiceServer) SearchAggregatedCompanyStatsList(context.Context, *SearchAggregatedCompanyStatsListRequest) (*SearchAggregatedCompanyStatsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAggregatedCompanyStatsList not implemented")
}
func (UnimplementedOfferAggregatorServiceServer) GetCompanyAggregatedOfferStatsLists(context.Context, *GetCompanyAggregatedOfferStatsListsRequest) (*GetCompanyAggregatedOfferStatsListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyAggregatedOfferStatsLists not implemented")
}
func (UnimplementedOfferAggregatorServiceServer) mustEmbedUnimplementedOfferAggregatorServiceServer() {
}

// UnsafeOfferAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferAggregatorServiceServer will
// result in compilation errors.
type UnsafeOfferAggregatorServiceServer interface {
	mustEmbedUnimplementedOfferAggregatorServiceServer()
}

func RegisterOfferAggregatorServiceServer(s grpc.ServiceRegistrar, srv OfferAggregatorServiceServer) {
	s.RegisterService(&OfferAggregatorService_ServiceDesc, srv)
}

func _OfferAggregatorService_GetAggregatedCompanyStatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedCompanyStatsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferAggregatorServiceServer).GetAggregatedCompanyStatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferAggregatorService_GetAggregatedCompanyStatsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferAggregatorServiceServer).GetAggregatedCompanyStatsList(ctx, req.(*GetAggregatedCompanyStatsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferAggregatorService_SearchAggregatedCompanyStatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAggregatedCompanyStatsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferAggregatorServiceServer).SearchAggregatedCompanyStatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferAggregatorService_SearchAggregatedCompanyStatsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferAggregatorServiceServer).SearchAggregatedCompanyStatsList(ctx, req.(*SearchAggregatedCompanyStatsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferAggregatorService_GetCompanyAggregatedOfferStatsLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyAggregatedOfferStatsListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferAggregatorServiceServer).GetCompanyAggregatedOfferStatsLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferAggregatorService_GetCompanyAggregatedOfferStatsLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferAggregatorServiceServer).GetCompanyAggregatedOfferStatsLists(ctx, req.(*GetCompanyAggregatedOfferStatsListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfferAggregatorService_ServiceDesc is the grpc.ServiceDesc for OfferAggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfferAggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offer_aggregator_service.v1.OfferAggregatorService",
	HandlerType: (*OfferAggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedCompanyStatsList",
			Handler:    _OfferAggregatorService_GetAggregatedCompanyStatsList_Handler,
		},
		{
			MethodName: "SearchAggregatedCompanyStatsList",
			Handler:    _OfferAggregatorService_SearchAggregatedCompanyStatsList_Handler,
		},
		{
			MethodName: "GetCompanyAggregatedOfferStatsLists",
			Handler:    _OfferAggregatorService_GetCompanyAggregatedOfferStatsLists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offer_aggregator_service/v1/api.proto",
}
