syntax = "proto3";

package offer_aggregator_service.v1;

import "validate/validate.proto";

service OfferAggregatorService {
    // Get the list of aggregated company statisics.
    //
    // This API endpoint is meant to be used for simple, fast listing. For more in-depth searching and filtering
    // of aggregated company statistics, use the API endpoint GetAggregatedCompanyStatsList.
    rpc GetAggregatedCompanyStatsList(GetAggregatedCompanyStatsListRequest) returns (GetAggregatedCompanyStatsListResponse) {}
    // Search the list of aggregated company statisics.
    //
    // This API endpoint is meant to be used for more in-depth search and filtering of aggregated company statistic.
    // For simpler, faster listing without any filtering logic, use the API endpoint GetAggregatedCompanyStatsList.
    rpc SearchAggregatedCompanyStatsList(SearchAggregatedCompanyStatsListRequest) returns (SearchAggregatedCompanyStatsListResponse) {}
    // Get the list of aggregated offer statistic of a company.
    rpc GetCompanyAggregatedOfferStatsLists(GetCompanyAggregatedOfferStatsListsRequest) returns (GetCompanyAggregatedOfferStatsListsResponse) {}
}

message Company {
    uint64 id = 1;
    string name = 2;
    string profile_image_url = 3;
}

message Location {
    uint64 id = 1;
    string country = 2 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
    }];
    string state = 3 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$",
    }];
    string city = 4 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
    }];
}

message Position {
    uint64 id = 1;
    string title = 2 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$",
    }];
    string level = 3 [(validate.rules).string = {
        pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$",
    }];
}

message MonetaryValue {
    // The amount of the monetary value, represented in the Inflated Integer format with multiplier of 10^5.
    uint64 amount = 1;
    // The 3-letter ISO currency code of the currency denoting the monetary value.
    string currency = 2;
}

message AggregatedOfferStats {
    uint64 id = 1;
    Company company = 2;
    Location location = 3;
    Position position = 4;
    MonetaryValue minimum_total_package = 5;
    MonetaryValue maximum_total_package = 6;
}

message CompanyAggregatedOfferStatsSortOrder {
    enum Value {
        VALUE_UNSPECIFIED = 0;
        // Sort offer by ascending country first, then ascending state, ascending city and aseconding ID.
        VALUE_LOCATION_ASCENDING = 5;
        // Sort offer by descending country first, then descending state, descending city and descending ID.
        VALUE_LOCATION_DESCENDING = 6;
        // Sort offer by ascending position name first, ascending ID second.
        VALUE_POSITION_ASCENDING = 7;
        // Sort offer by descending position name first, descending ID second.
        VALUE_POSITION_DESCENDING = 8;
    }
}

message AggregatedCompanyStats {
    Company company = 1;
    uint64 total_submission_count = 2;
}

message AggregatedCompanyStatsSortOrder {
    enum Value {
        VALUE_UNSPECIFIED = 0;
        // Sort offer by ascending company ID.
        VALUE_ID_ASCENDING = 1;
        // Sort offer by descending company ID.
        VALUE_ID_DESCENDING = 2;
        // Sort offer by ascending company name first, ascending company ID second.
        VALUE_NAME_ASCENDING = 3;
        // Sort offer by descending company name first, descending company ID second.
        VALUE_NAME_DESCENDING = 4;
    }
}

// Filter options when listing aggregated company statistics. Entries must match all of the provided conditions to be returned in the final result.
message AggregatedCompanyStatsFilterOptions {
    // The company name to search for. The company's name must match the provided query using full-text index search.
    string company_name_query = 1;
    // The list of country ISO codes where the offers were extended from.
    // The company must have at least one aggregated offer information belonging to one of the provided countries.
    repeated string country_list = 2 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[A-Z]{2}$",
            },
        },
    }];
    // The list of state names where the offers were extended from.
    // The company must have at least one aggregated offer information belonging to one of the provided states.
    repeated string state_list = 3 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of city names where the offers were extended from.
    // The company must have at least one aggregated offer information belonging to one of the provided cities.
    repeated string city_list = 4 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
    // The list of position titles of the requested offers.
    // The company must have at least one aggregated offer information matching one of the provided title using full-text index search.
    repeated string position_title_list = 5 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}",
            },
        },
    }];
    // The list of position level codes of the requested offers.
    // The company must have at least one aggregated offer information matching one of the provided level codes.
    repeated string position_level_list = 6 [(validate.rules).repeated = {
        max_items: 10,
        items: {
            string: {
                pattern: "^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$",
            },
        },
    }];
}

message GetAggregatedCompanyStatsListRequest {
    oneof cursor {
        uint64 company_id = 1;
        string company_name = 2;
    }
    AggregatedCompanyStatsSortOrder.Value sort_order = 3;
    uint64 limit = 4 [(validate.rules).uint64 = {
        lte: 100,
    }];
}

message GetAggregatedCompanyStatsListResponse {
    repeated AggregatedCompanyStats company_stat_list = 1;
    oneof previous_cursor {
        uint64 previous_company_id = 2;
        string previous_company_name = 3;
    }
    oneof next_cursor {
        uint64 next_company_id = 4;
        string next_company_name = 5;
    }
}

message SearchAggregatedCompanyStatsListRequest {
    AggregatedCompanyStatsFilterOptions filter_options = 1;
    AggregatedCompanyStatsSortOrder.Value sort_order = 2;
    uint64 offset = 3;
    uint64 limit = 4 [(validate.rules).uint64 = {
        lte: 100,
    }];
}

message SearchAggregatedCompanyStatsListResponse {
    repeated AggregatedCompanyStats company_stat_list = 1;
    uint64 total_company_stat_count = 2;
}

message GetCompanyAggregatedOfferStatsListsRequest {
    oneof cursor {
        uint64 location_id = 1;
        string position_name = 2;
    }
    CompanyAggregatedOfferStatsSortOrder.Value sort_order = 3;
    uint64 limit = 4 [(validate.rules).uint64 = {
        lte: 100,
    }];
}

message GetCompanyAggregatedOfferStatsListsResponse {
    repeated AggregatedCompanyStats offer_stat_list = 1;
    oneof previous_cursor {
        uint64 previous_location_id = 2;
        string previous_position_id = 3;
    }
    oneof next_cursor {
        uint64 next_location_id = 4;
        string next_position_id = 5;
    }
}
