// Code generated by MockGen. DO NOT EDIT.
// Source: ./company.go
//
// Generated by this command:
//
//	mockgen -source=./company.go -destination=./company_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyAccessor is a mock of CompanyAccessor interface.
type MockCompanyAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyAccessorMockRecorder
}

// MockCompanyAccessorMockRecorder is the mock recorder for MockCompanyAccessor.
type MockCompanyAccessorMockRecorder struct {
	mock *MockCompanyAccessor
}

// NewMockCompanyAccessor creates a new mock instance.
func NewMockCompanyAccessor(ctrl *gomock.Controller) *MockCompanyAccessor {
	mock := &MockCompanyAccessor{ctrl: ctrl}
	mock.recorder = &MockCompanyAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyAccessor) EXPECT() *MockCompanyAccessorMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyAccessor) CreateCompany(ctx context.Context, data *Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyAccessorMockRecorder) CreateCompany(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyAccessor)(nil).CreateCompany), ctx, data)
}

// UpdateCompany mocks base method.
func (m *MockCompanyAccessor) UpdateCompany(ctx context.Context, data *Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyAccessorMockRecorder) UpdateCompany(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyAccessor)(nil).UpdateCompany), ctx, data)
}
