// Code generated by MockGen. DO NOT EDIT.
// Source: ./location.go
//
// Generated by this command:
//
//	mockgen -source=./location.go -destination=./location_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLocationAccessor is a mock of LocationAccessor interface.
type MockLocationAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockLocationAccessorMockRecorder
}

// MockLocationAccessorMockRecorder is the mock recorder for MockLocationAccessor.
type MockLocationAccessorMockRecorder struct {
	mock *MockLocationAccessor
}

// NewMockLocationAccessor creates a new mock instance.
func NewMockLocationAccessor(ctrl *gomock.Controller) *MockLocationAccessor {
	mock := &MockLocationAccessor{ctrl: ctrl}
	mock.recorder = &MockLocationAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationAccessor) EXPECT() *MockLocationAccessorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLocationAccessor) Create(ctx context.Context, location *Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLocationAccessorMockRecorder) Create(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLocationAccessor)(nil).Create), ctx, location)
}

// Delete mocks base method.
func (m *MockLocationAccessor) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLocationAccessorMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLocationAccessor)(nil).Delete), ctx, id)
}

// GetByCountryStateCity mocks base method.
func (m *MockLocationAccessor) GetByCountryStateCity(ctx context.Context, country, state, city string) (*Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCountryStateCity", ctx, country, state, city)
	ret0, _ := ret[0].(*Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCountryStateCity indicates an expected call of GetByCountryStateCity.
func (mr *MockLocationAccessorMockRecorder) GetByCountryStateCity(ctx, country, state, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCountryStateCity", reflect.TypeOf((*MockLocationAccessor)(nil).GetByCountryStateCity), ctx, country, state, city)
}

// GetByID mocks base method.
func (m *MockLocationAccessor) GetByID(ctx context.Context, id uint64) (*Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLocationAccessorMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLocationAccessor)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockLocationAccessor) Update(ctx context.Context, location *Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLocationAccessorMockRecorder) Update(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLocationAccessor)(nil).Update), ctx, location)
}
