// Code generated by MockGen. DO NOT EDIT.
// Source: ./company_profile_image.go
//
// Generated by this command:
//
//	mockgen -source=./company_profile_image.go -destination=./company_profile_image_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyProfileImageAccessor is a mock of CompanyProfileImageAccessor interface.
type MockCompanyProfileImageAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyProfileImageAccessorMockRecorder
}

// MockCompanyProfileImageAccessorMockRecorder is the mock recorder for MockCompanyProfileImageAccessor.
type MockCompanyProfileImageAccessorMockRecorder struct {
	mock *MockCompanyProfileImageAccessor
}

// NewMockCompanyProfileImageAccessor creates a new mock instance.
func NewMockCompanyProfileImageAccessor(ctrl *gomock.Controller) *MockCompanyProfileImageAccessor {
	mock := &MockCompanyProfileImageAccessor{ctrl: ctrl}
	mock.recorder = &MockCompanyProfileImageAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyProfileImageAccessor) EXPECT() *MockCompanyProfileImageAccessorMockRecorder {
	return m.recorder
}

// CreateCompanyProfileImage mocks base method.
func (m *MockCompanyProfileImageAccessor) CreateCompanyProfileImage(ctx context.Context, data *CompanyProfileImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyProfileImage", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompanyProfileImage indicates an expected call of CreateCompanyProfileImage.
func (mr *MockCompanyProfileImageAccessorMockRecorder) CreateCompanyProfileImage(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyProfileImage", reflect.TypeOf((*MockCompanyProfileImageAccessor)(nil).CreateCompanyProfileImage), ctx, data)
}
