// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: offer_service/v1/api.proto

package offer_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OfferStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferStatusMultiError, or
// nil if none found.
func (m *OfferStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OfferStatusMultiError(errors)
	}

	return nil
}

// OfferStatusMultiError is an error wrapping multiple validation errors
// returned by OfferStatus.ValidateAll() if the designated constraints aren't met.
type OfferStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferStatusMultiError) AllErrors() []error { return m }

// OfferStatusValidationError is the validation error returned by
// OfferStatus.Validate if the designated constraints aren't met.
type OfferStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferStatusValidationError) ErrorName() string { return "OfferStatusValidationError" }

// Error satisfies the builtin error interface
func (e OfferStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferStatusValidationError{}

// Validate checks the field values on CompanyProfileImage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyProfileImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyProfileImage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyProfileImageMultiError, or nil if none found.
func (m *CompanyProfileImage) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyProfileImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PresignPutUrl

	if len(errors) > 0 {
		return CompanyProfileImageMultiError(errors)
	}

	return nil
}

// CompanyProfileImageMultiError is an error wrapping multiple validation
// errors returned by CompanyProfileImage.ValidateAll() if the designated
// constraints aren't met.
type CompanyProfileImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyProfileImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyProfileImageMultiError) AllErrors() []error { return m }

// CompanyProfileImageValidationError is the validation error returned by
// CompanyProfileImage.Validate if the designated constraints aren't met.
type CompanyProfileImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyProfileImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyProfileImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyProfileImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyProfileImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyProfileImageValidationError) ErrorName() string {
	return "CompanyProfileImageValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyProfileImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyProfileImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyProfileImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyProfileImageValidationError{}

// Validate checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CompanyMultiError, or nil if none found.
func (m *Company) ValidateAll() error {
	return m.validate(true)
}

func (m *Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ProfileImageUrl

	if len(errors) > 0 {
		return CompanyMultiError(errors)
	}

	return nil
}

// CompanyMultiError is an error wrapping multiple validation errors returned
// by Company.ValidateAll() if the designated constraints aren't met.
type CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyMultiError) AllErrors() []error { return m }

// CompanyValidationError is the validation error returned by Company.Validate
// if the designated constraints aren't met.
type CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyValidationError) ErrorName() string { return "CompanyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Location_Country_Pattern.MatchString(m.GetCountry()) {
		err := LocationValidationError{
			field:  "Country",
			reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Location_State_Pattern.MatchString(m.GetState()) {
		err := LocationValidationError{
			field:  "State",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{0,64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Location_City_Pattern.MatchString(m.GetCity()) {
		err := LocationValidationError{
			field:  "City",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

var _Location_Country_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _Location_State_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,64}$")

var _Location_City_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

// Validate checks the field values on PositionLevel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PositionLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionLevel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositionLevelMultiError, or
// nil if none found.
func (m *PositionLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PositionLevelMultiError(errors)
	}

	return nil
}

// PositionLevelMultiError is an error wrapping multiple validation errors
// returned by PositionLevel.ValidateAll() if the designated constraints
// aren't met.
type PositionLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionLevelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionLevelMultiError) AllErrors() []error { return m }

// PositionLevelValidationError is the validation error returned by
// PositionLevel.Validate if the designated constraints aren't met.
type PositionLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionLevelValidationError) ErrorName() string { return "PositionLevelValidationError" }

// Error satisfies the builtin error interface
func (e PositionLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionLevelValidationError{}

// Validate checks the field values on Position with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Position) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Position with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositionMultiError, or nil
// if none found.
func (m *Position) ValidateAll() error {
	return m.validate(true)
}

func (m *Position) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Position_Title_Pattern.MatchString(m.GetTitle()) {
		err := PositionValidationError{
			field:  "Title",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionValidationError{
				field:  "Level",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PositionMultiError(errors)
	}

	return nil
}

// PositionMultiError is an error wrapping multiple validation errors returned
// by Position.ValidateAll() if the designated constraints aren't met.
type PositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionMultiError) AllErrors() []error { return m }

// PositionValidationError is the validation error returned by
// Position.Validate if the designated constraints aren't met.
type PositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionValidationError) ErrorName() string { return "PositionValidationError" }

// Error satisfies the builtin error interface
func (e PositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionValidationError{}

var _Position_Title_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$")

// Validate checks the field values on MonetaryValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonetaryValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonetaryValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonetaryValueMultiError, or
// nil if none found.
func (m *MonetaryValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MonetaryValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if !_MonetaryValue_Currency_Pattern.MatchString(m.GetCurrency()) {
		err := MonetaryValueValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[A-Z]{3}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MonetaryValueMultiError(errors)
	}

	return nil
}

// MonetaryValueMultiError is an error wrapping multiple validation errors
// returned by MonetaryValue.ValidateAll() if the designated constraints
// aren't met.
type MonetaryValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonetaryValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonetaryValueMultiError) AllErrors() []error { return m }

// MonetaryValueValidationError is the validation error returned by
// MonetaryValue.Validate if the designated constraints aren't met.
type MonetaryValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonetaryValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonetaryValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonetaryValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonetaryValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonetaryValueValidationError) ErrorName() string { return "MonetaryValueValidationError" }

// Error satisfies the builtin error interface
func (e MonetaryValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonetaryValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonetaryValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonetaryValueValidationError{}

var _MonetaryValue_Currency_Pattern = regexp.MustCompile("^[A-Z]{3}$")

// Validate checks the field values on OfferImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OfferImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OfferImageMultiError, or
// nil if none found.
func (m *OfferImage) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PresignPutUrl

	if len(errors) > 0 {
		return OfferImageMultiError(errors)
	}

	return nil
}

// OfferImageMultiError is an error wrapping multiple validation errors
// returned by OfferImage.ValidateAll() if the designated constraints aren't met.
type OfferImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferImageMultiError) AllErrors() []error { return m }

// OfferImageValidationError is the validation error returned by
// OfferImage.Validate if the designated constraints aren't met.
type OfferImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferImageValidationError) ErrorName() string { return "OfferImageValidationError" }

// Error satisfies the builtin error interface
func (e OfferImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferImageValidationError{}

// Validate checks the field values on Offer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Offer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Offer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OfferMultiError, or nil if none found.
func (m *Offer) ValidateAll() error {
	return m.validate(true)
}

func (m *Offer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfferValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfferValidationError{
				field:  "TotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ImageUrl

	// no validation rules for Status

	// no validation rules for CreatedTime

	if len(errors) > 0 {
		return OfferMultiError(errors)
	}

	return nil
}

// OfferMultiError is an error wrapping multiple validation errors returned by
// Offer.ValidateAll() if the designated constraints aren't met.
type OfferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferMultiError) AllErrors() []error { return m }

// OfferValidationError is the validation error returned by Offer.Validate if
// the designated constraints aren't met.
type OfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferValidationError) ErrorName() string { return "OfferValidationError" }

// Error satisfies the builtin error interface
func (e OfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferValidationError{}

// Validate checks the field values on OfferListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfferListFilterOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfferListFilterOptionsMultiError, or nil if none found.
func (m *OfferListFilterOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferListFilterOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCompanyIdList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CompanyIdList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCountryList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CountryList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCountryList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_CountryList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("CountryList[%v]", idx),
				reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetStateList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "StateList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetStateList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_StateList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("StateList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetCityList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "CityList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCityList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_CityList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("CityList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionTitleList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "PositionTitleList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionTitleList() {
		_, _ = idx, item

		if !_OfferListFilterOptions_PositionTitleList_Pattern.MatchString(item) {
			err := OfferListFilterOptionsValidationError{
				field:  fmt.Sprintf("PositionTitleList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionLevelList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "PositionLevelList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionLevelList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OfferListFilterOptionsValidationError{
						field:  fmt.Sprintf("PositionLevelList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OfferListFilterOptionsValidationError{
						field:  fmt.Sprintf("PositionLevelList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OfferListFilterOptionsValidationError{
					field:  fmt.Sprintf("PositionLevelList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetStatusList()) > 10 {
		err := OfferListFilterOptionsValidationError{
			field:  "StatusList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OfferListFilterOptionsMultiError(errors)
	}

	return nil
}

// OfferListFilterOptionsMultiError is an error wrapping multiple validation
// errors returned by OfferListFilterOptions.ValidateAll() if the designated
// constraints aren't met.
type OfferListFilterOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferListFilterOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferListFilterOptionsMultiError) AllErrors() []error { return m }

// OfferListFilterOptionsValidationError is the validation error returned by
// OfferListFilterOptions.Validate if the designated constraints aren't met.
type OfferListFilterOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferListFilterOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferListFilterOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferListFilterOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferListFilterOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferListFilterOptionsValidationError) ErrorName() string {
	return "OfferListFilterOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e OfferListFilterOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferListFilterOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferListFilterOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferListFilterOptionsValidationError{}

var _OfferListFilterOptions_CountryList_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _OfferListFilterOptions_StateList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _OfferListFilterOptions_CityList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _OfferListFilterOptions_PositionTitleList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}")

// Validate checks the field values on OfferListSortOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfferListSortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfferListSortOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfferListSortOrderMultiError, or nil if none found.
func (m *OfferListSortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *OfferListSortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OfferListSortOrderMultiError(errors)
	}

	return nil
}

// OfferListSortOrderMultiError is an error wrapping multiple validation errors
// returned by OfferListSortOrder.ValidateAll() if the designated constraints
// aren't met.
type OfferListSortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfferListSortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfferListSortOrderMultiError) AllErrors() []error { return m }

// OfferListSortOrderValidationError is the validation error returned by
// OfferListSortOrder.Validate if the designated constraints aren't met.
type OfferListSortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferListSortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferListSortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferListSortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferListSortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferListSortOrderValidationError) ErrorName() string {
	return "OfferListSortOrderValidationError"
}

// Error satisfies the builtin error interface
func (e OfferListSortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferListSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferListSortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferListSortOrderValidationError{}

// Validate checks the field values on AggregatedOfferStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregatedOfferStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregatedOfferStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregatedOfferStatsMultiError, or nil if none found.
func (m *AggregatedOfferStats) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregatedOfferStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedOfferStatsValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedOfferStatsValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedOfferStatsValidationError{
				field:  "Level",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinimumTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "MinimumTotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "MinimumTotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinimumTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedOfferStatsValidationError{
				field:  "MinimumTotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaximumTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "MaximumTotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedOfferStatsValidationError{
					field:  "MaximumTotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaximumTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedOfferStatsValidationError{
				field:  "MaximumTotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AggregatedOfferStatsMultiError(errors)
	}

	return nil
}

// AggregatedOfferStatsMultiError is an error wrapping multiple validation
// errors returned by AggregatedOfferStats.ValidateAll() if the designated
// constraints aren't met.
type AggregatedOfferStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregatedOfferStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregatedOfferStatsMultiError) AllErrors() []error { return m }

// AggregatedOfferStatsValidationError is the validation error returned by
// AggregatedOfferStats.Validate if the designated constraints aren't met.
type AggregatedOfferStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedOfferStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedOfferStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedOfferStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedOfferStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedOfferStatsValidationError) ErrorName() string {
	return "AggregatedOfferStatsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedOfferStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedOfferStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedOfferStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedOfferStatsValidationError{}

// Validate checks the field values on CompanyAggregatedOfferStatsSortOrder
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CompanyAggregatedOfferStatsSortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAggregatedOfferStatsSortOrder
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompanyAggregatedOfferStatsSortOrderMultiError, or nil if none found.
func (m *CompanyAggregatedOfferStatsSortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAggregatedOfferStatsSortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompanyAggregatedOfferStatsSortOrderMultiError(errors)
	}

	return nil
}

// CompanyAggregatedOfferStatsSortOrderMultiError is an error wrapping multiple
// validation errors returned by
// CompanyAggregatedOfferStatsSortOrder.ValidateAll() if the designated
// constraints aren't met.
type CompanyAggregatedOfferStatsSortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAggregatedOfferStatsSortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAggregatedOfferStatsSortOrderMultiError) AllErrors() []error { return m }

// CompanyAggregatedOfferStatsSortOrderValidationError is the validation error
// returned by CompanyAggregatedOfferStatsSortOrder.Validate if the designated
// constraints aren't met.
type CompanyAggregatedOfferStatsSortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAggregatedOfferStatsSortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAggregatedOfferStatsSortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAggregatedOfferStatsSortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAggregatedOfferStatsSortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAggregatedOfferStatsSortOrderValidationError) ErrorName() string {
	return "CompanyAggregatedOfferStatsSortOrderValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyAggregatedOfferStatsSortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAggregatedOfferStatsSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAggregatedOfferStatsSortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAggregatedOfferStatsSortOrderValidationError{}

// Validate checks the field values on AggregatedCompanyStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregatedCompanyStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregatedCompanyStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregatedCompanyStatsMultiError, or nil if none found.
func (m *AggregatedCompanyStats) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregatedCompanyStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregatedCompanyStatsValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregatedCompanyStatsValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregatedCompanyStatsValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalSubmissionCount

	if len(errors) > 0 {
		return AggregatedCompanyStatsMultiError(errors)
	}

	return nil
}

// AggregatedCompanyStatsMultiError is an error wrapping multiple validation
// errors returned by AggregatedCompanyStats.ValidateAll() if the designated
// constraints aren't met.
type AggregatedCompanyStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregatedCompanyStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregatedCompanyStatsMultiError) AllErrors() []error { return m }

// AggregatedCompanyStatsValidationError is the validation error returned by
// AggregatedCompanyStats.Validate if the designated constraints aren't met.
type AggregatedCompanyStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedCompanyStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedCompanyStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedCompanyStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedCompanyStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedCompanyStatsValidationError) ErrorName() string {
	return "AggregatedCompanyStatsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedCompanyStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedCompanyStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedCompanyStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedCompanyStatsValidationError{}

// Validate checks the field values on AggregatedCompanyStatsSortOrder with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregatedCompanyStatsSortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregatedCompanyStatsSortOrder with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AggregatedCompanyStatsSortOrderMultiError, or nil if none found.
func (m *AggregatedCompanyStatsSortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregatedCompanyStatsSortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AggregatedCompanyStatsSortOrderMultiError(errors)
	}

	return nil
}

// AggregatedCompanyStatsSortOrderMultiError is an error wrapping multiple
// validation errors returned by AggregatedCompanyStatsSortOrder.ValidateAll()
// if the designated constraints aren't met.
type AggregatedCompanyStatsSortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregatedCompanyStatsSortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregatedCompanyStatsSortOrderMultiError) AllErrors() []error { return m }

// AggregatedCompanyStatsSortOrderValidationError is the validation error
// returned by AggregatedCompanyStatsSortOrder.Validate if the designated
// constraints aren't met.
type AggregatedCompanyStatsSortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedCompanyStatsSortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedCompanyStatsSortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedCompanyStatsSortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedCompanyStatsSortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedCompanyStatsSortOrderValidationError) ErrorName() string {
	return "AggregatedCompanyStatsSortOrderValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedCompanyStatsSortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedCompanyStatsSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedCompanyStatsSortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedCompanyStatsSortOrderValidationError{}

// Validate checks the field values on AggregatedCompanyStatsFilterOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AggregatedCompanyStatsFilterOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregatedCompanyStatsFilterOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AggregatedCompanyStatsFilterOptionsMultiError, or nil if none found.
func (m *AggregatedCompanyStatsFilterOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregatedCompanyStatsFilterOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyNameQuery

	if len(m.GetCountryList()) > 10 {
		err := AggregatedCompanyStatsFilterOptionsValidationError{
			field:  "CountryList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCountryList() {
		_, _ = idx, item

		if !_AggregatedCompanyStatsFilterOptions_CountryList_Pattern.MatchString(item) {
			err := AggregatedCompanyStatsFilterOptionsValidationError{
				field:  fmt.Sprintf("CountryList[%v]", idx),
				reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetStateList()) > 10 {
		err := AggregatedCompanyStatsFilterOptionsValidationError{
			field:  "StateList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetStateList() {
		_, _ = idx, item

		if !_AggregatedCompanyStatsFilterOptions_StateList_Pattern.MatchString(item) {
			err := AggregatedCompanyStatsFilterOptionsValidationError{
				field:  fmt.Sprintf("StateList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetCityList()) > 10 {
		err := AggregatedCompanyStatsFilterOptionsValidationError{
			field:  "CityList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCityList() {
		_, _ = idx, item

		if !_AggregatedCompanyStatsFilterOptions_CityList_Pattern.MatchString(item) {
			err := AggregatedCompanyStatsFilterOptionsValidationError{
				field:  fmt.Sprintf("CityList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionTitleList()) > 10 {
		err := AggregatedCompanyStatsFilterOptionsValidationError{
			field:  "PositionTitleList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionTitleList() {
		_, _ = idx, item

		if !_AggregatedCompanyStatsFilterOptions_PositionTitleList_Pattern.MatchString(item) {
			err := AggregatedCompanyStatsFilterOptionsValidationError{
				field:  fmt.Sprintf("PositionTitleList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetPositionLevelList()) > 10 {
		err := AggregatedCompanyStatsFilterOptionsValidationError{
			field:  "PositionLevelList",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPositionLevelList() {
		_, _ = idx, item

		if !_AggregatedCompanyStatsFilterOptions_PositionLevelList_Pattern.MatchString(item) {
			err := AggregatedCompanyStatsFilterOptionsValidationError{
				field:  fmt.Sprintf("PositionLevelList[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,64}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AggregatedCompanyStatsFilterOptionsMultiError(errors)
	}

	return nil
}

// AggregatedCompanyStatsFilterOptionsMultiError is an error wrapping multiple
// validation errors returned by
// AggregatedCompanyStatsFilterOptions.ValidateAll() if the designated
// constraints aren't met.
type AggregatedCompanyStatsFilterOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregatedCompanyStatsFilterOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregatedCompanyStatsFilterOptionsMultiError) AllErrors() []error { return m }

// AggregatedCompanyStatsFilterOptionsValidationError is the validation error
// returned by AggregatedCompanyStatsFilterOptions.Validate if the designated
// constraints aren't met.
type AggregatedCompanyStatsFilterOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedCompanyStatsFilterOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedCompanyStatsFilterOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedCompanyStatsFilterOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedCompanyStatsFilterOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedCompanyStatsFilterOptionsValidationError) ErrorName() string {
	return "AggregatedCompanyStatsFilterOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedCompanyStatsFilterOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedCompanyStatsFilterOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedCompanyStatsFilterOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedCompanyStatsFilterOptionsValidationError{}

var _AggregatedCompanyStatsFilterOptions_CountryList_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _AggregatedCompanyStatsFilterOptions_StateList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _AggregatedCompanyStatsFilterOptions_CityList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

var _AggregatedCompanyStatsFilterOptions_PositionTitleList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}")

var _AggregatedCompanyStatsFilterOptions_PositionLevelList_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,64}$")

// Validate checks the field values on CreateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompanyRequestMultiError, or nil if none found.
func (m *CreateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateCompanyRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateCompanyRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{1,256}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CompanyProfileImageId

	if len(errors) > 0 {
		return CreateCompanyRequestMultiError(errors)
	}

	return nil
}

// CreateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyRequestMultiError) AllErrors() []error { return m }

// CreateCompanyRequestValidationError is the validation error returned by
// CreateCompanyRequest.Validate if the designated constraints aren't met.
type CreateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyRequestValidationError) ErrorName() string {
	return "CreateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyRequestValidationError{}

var _CreateCompanyRequest_Name_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{1,256}$")

// Validate checks the field values on CreateCompanyProfileImageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCompanyProfileImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyProfileImageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCompanyProfileImageRequestMultiError, or nil if none found.
func (m *CreateCompanyProfileImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyProfileImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCompanyProfileImageRequestMultiError(errors)
	}

	return nil
}

// CreateCompanyProfileImageRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCompanyProfileImageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCompanyProfileImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyProfileImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyProfileImageRequestMultiError) AllErrors() []error { return m }

// CreateCompanyProfileImageRequestValidationError is the validation error
// returned by CreateCompanyProfileImageRequest.Validate if the designated
// constraints aren't met.
type CreateCompanyProfileImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyProfileImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyProfileImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyProfileImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyProfileImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyProfileImageRequestValidationError) ErrorName() string {
	return "CreateCompanyProfileImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyProfileImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyProfileImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyProfileImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyProfileImageRequestValidationError{}

// Validate checks the field values on CreateCompanyProfileImageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCompanyProfileImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyProfileImageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCompanyProfileImageResponseMultiError, or nil if none found.
func (m *CreateCompanyProfileImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyProfileImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCompanyProfileImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCompanyProfileImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCompanyProfileImageResponseValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCompanyProfileImageResponseMultiError(errors)
	}

	return nil
}

// CreateCompanyProfileImageResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCompanyProfileImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCompanyProfileImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyProfileImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyProfileImageResponseMultiError) AllErrors() []error { return m }

// CreateCompanyProfileImageResponseValidationError is the validation error
// returned by CreateCompanyProfileImageResponse.Validate if the designated
// constraints aren't met.
type CreateCompanyProfileImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyProfileImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyProfileImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyProfileImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyProfileImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyProfileImageResponseValidationError) ErrorName() string {
	return "CreateCompanyProfileImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyProfileImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyProfileImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyProfileImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyProfileImageResponseValidationError{}

// Validate checks the field values on CreateCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompanyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompanyResponseMultiError, or nil if none found.
func (m *CreateCompanyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCompanyResponseValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCompanyResponseValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCompanyResponseValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCompanyResponseMultiError(errors)
	}

	return nil
}

// CreateCompanyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCompanyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCompanyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyResponseMultiError) AllErrors() []error { return m }

// CreateCompanyResponseValidationError is the validation error returned by
// CreateCompanyResponse.Validate if the designated constraints aren't met.
type CreateCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyResponseValidationError) ErrorName() string {
	return "CreateCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyResponseValidationError{}

// Validate checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyRequestMultiError, or nil if none found.
func (m *UpdateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateCompanyRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateCompanyRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{P}\\\\p{S}\\\\p{Z}]{0,256}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CompanyProfileImageId

	if len(errors) > 0 {
		return UpdateCompanyRequestMultiError(errors)
	}

	return nil
}

// UpdateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyRequestMultiError) AllErrors() []error { return m }

// UpdateCompanyRequestValidationError is the validation error returned by
// UpdateCompanyRequest.Validate if the designated constraints aren't met.
type UpdateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyRequestValidationError) ErrorName() string {
	return "UpdateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyRequestValidationError{}

var _UpdateCompanyRequest_Name_Pattern = regexp.MustCompile("^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}\\p{Z}]{0,256}$")

// Validate checks the field values on UpdateCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyResponseMultiError, or nil if none found.
func (m *UpdateCompanyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCompanyResponseValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCompanyResponseValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCompanyResponseValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCompanyResponseMultiError(errors)
	}

	return nil
}

// UpdateCompanyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCompanyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCompanyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyResponseMultiError) AllErrors() []error { return m }

// UpdateCompanyResponseValidationError is the validation error returned by
// UpdateCompanyResponse.Validate if the designated constraints aren't met.
type UpdateCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyResponseValidationError) ErrorName() string {
	return "UpdateCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyResponseValidationError{}

// Validate checks the field values on CreateOfferImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferImageRequestMultiError, or nil if none found.
func (m *CreateOfferImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOfferImageRequestMultiError(errors)
	}

	return nil
}

// CreateOfferImageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOfferImageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferImageRequestMultiError) AllErrors() []error { return m }

// CreateOfferImageRequestValidationError is the validation error returned by
// CreateOfferImageRequest.Validate if the designated constraints aren't met.
type CreateOfferImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferImageRequestValidationError) ErrorName() string {
	return "CreateOfferImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferImageRequestValidationError{}

// Validate checks the field values on CreateOfferImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferImageResponseMultiError, or nil if none found.
func (m *CreateOfferImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferImageResponseValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOfferImageResponseMultiError(errors)
	}

	return nil
}

// CreateOfferImageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfferImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferImageResponseMultiError) AllErrors() []error { return m }

// CreateOfferImageResponseValidationError is the validation error returned by
// CreateOfferImageResponse.Validate if the designated constraints aren't met.
type CreateOfferImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferImageResponseValidationError) ErrorName() string {
	return "CreateOfferImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferImageResponseValidationError{}

// Validate checks the field values on CreateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferRequestMultiError, or nil if none found.
func (m *CreateOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferRequestValidationError{
					field:  "TotalPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferRequestValidationError{
				field:  "TotalPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ImageId

	if len(errors) > 0 {
		return CreateOfferRequestMultiError(errors)
	}

	return nil
}

// CreateOfferRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferRequestMultiError) AllErrors() []error { return m }

// CreateOfferRequestValidationError is the validation error returned by
// CreateOfferRequest.Validate if the designated constraints aren't met.
type CreateOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferRequestValidationError) ErrorName() string {
	return "CreateOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferRequestValidationError{}

// Validate checks the field values on CreateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfferResponseMultiError, or nil if none found.
func (m *CreateOfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfferResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOfferResponseMultiError(errors)
	}

	return nil
}

// CreateOfferResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfferResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfferResponseMultiError) AllErrors() []error { return m }

// CreateOfferResponseValidationError is the validation error returned by
// CreateOfferResponse.Validate if the designated constraints aren't met.
type CreateOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferResponseValidationError) ErrorName() string {
	return "CreateOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferResponseValidationError{}

// Validate checks the field values on UpdateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfferRequestMultiError, or nil if none found.
func (m *UpdateOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOfferRequestValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOfferRequestValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOfferRequestValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOfferRequestMultiError(errors)
	}

	return nil
}

// UpdateOfferRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfferRequestMultiError) AllErrors() []error { return m }

// UpdateOfferRequestValidationError is the validation error returned by
// UpdateOfferRequest.Validate if the designated constraints aren't met.
type UpdateOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferRequestValidationError) ErrorName() string {
	return "UpdateOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferRequestValidationError{}

// Validate checks the field values on UpdateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfferResponseMultiError, or nil if none found.
func (m *UpdateOfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOfferResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOfferResponseMultiError(errors)
	}

	return nil
}

// UpdateOfferResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOfferResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfferResponseMultiError) AllErrors() []error { return m }

// UpdateOfferResponseValidationError is the validation error returned by
// UpdateOfferResponse.Validate if the designated constraints aren't met.
type UpdateOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferResponseValidationError) ErrorName() string {
	return "UpdateOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferResponseValidationError{}

// Validate checks the field values on GetOfferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOfferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferRequestMultiError, or nil if none found.
func (m *GetOfferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOfferRequestMultiError(errors)
	}

	return nil
}

// GetOfferRequestMultiError is an error wrapping multiple validation errors
// returned by GetOfferRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOfferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferRequestMultiError) AllErrors() []error { return m }

// GetOfferRequestValidationError is the validation error returned by
// GetOfferRequest.Validate if the designated constraints aren't met.
type GetOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferRequestValidationError) ErrorName() string { return "GetOfferRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferRequestValidationError{}

// Validate checks the field values on GetOfferResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOfferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferResponseMultiError, or nil if none found.
func (m *GetOfferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOfferResponseValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOfferResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOfferResponseMultiError(errors)
	}

	return nil
}

// GetOfferResponseMultiError is an error wrapping multiple validation errors
// returned by GetOfferResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOfferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferResponseMultiError) AllErrors() []error { return m }

// GetOfferResponseValidationError is the validation error returned by
// GetOfferResponse.Validate if the designated constraints aren't met.
type GetOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferResponseValidationError) ErrorName() string { return "GetOfferResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferResponseValidationError{}

// Validate checks the field values on GetOfferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfferListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferListRequestMultiError, or nil if none found.
func (m *GetOfferListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilterOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOfferListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOfferListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOfferListRequestValidationError{
				field:  "FilterOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortOrder

	// no validation rules for Offset

	if m.GetLimit() > 100 {
		err := GetOfferListRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOfferListRequestMultiError(errors)
	}

	return nil
}

// GetOfferListRequestMultiError is an error wrapping multiple validation
// errors returned by GetOfferListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOfferListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferListRequestMultiError) AllErrors() []error { return m }

// GetOfferListRequestValidationError is the validation error returned by
// GetOfferListRequest.Validate if the designated constraints aren't met.
type GetOfferListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferListRequestValidationError) ErrorName() string {
	return "GetOfferListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfferListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferListRequestValidationError{}

// Validate checks the field values on GetOfferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfferListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfferListResponseMultiError, or nil if none found.
func (m *GetOfferListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfferListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOfferList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOfferListResponseValidationError{
						field:  fmt.Sprintf("OfferList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOfferListResponseValidationError{
						field:  fmt.Sprintf("OfferList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOfferListResponseValidationError{
					field:  fmt.Sprintf("OfferList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalOfferCount

	if len(errors) > 0 {
		return GetOfferListResponseMultiError(errors)
	}

	return nil
}

// GetOfferListResponseMultiError is an error wrapping multiple validation
// errors returned by GetOfferListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOfferListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfferListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfferListResponseMultiError) AllErrors() []error { return m }

// GetOfferListResponseValidationError is the validation error returned by
// GetOfferListResponse.Validate if the designated constraints aren't met.
type GetOfferListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferListResponseValidationError) ErrorName() string {
	return "GetOfferListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfferListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferListResponseValidationError{}

// Validate checks the field values on GetAggregatedCompanyStatsListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAggregatedCompanyStatsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAggregatedCompanyStatsListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAggregatedCompanyStatsListRequestMultiError, or nil if none found.
func (m *GetAggregatedCompanyStatsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAggregatedCompanyStatsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortOrder

	if m.GetLimit() > 100 {
		err := GetAggregatedCompanyStatsListRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Cursor.(type) {
	case *GetAggregatedCompanyStatsListRequest_CompanyId:
		if v == nil {
			err := GetAggregatedCompanyStatsListRequestValidationError{
				field:  "Cursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for CompanyId
	case *GetAggregatedCompanyStatsListRequest_CompanyName:
		if v == nil {
			err := GetAggregatedCompanyStatsListRequestValidationError{
				field:  "Cursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for CompanyName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAggregatedCompanyStatsListRequestMultiError(errors)
	}

	return nil
}

// GetAggregatedCompanyStatsListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetAggregatedCompanyStatsListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAggregatedCompanyStatsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAggregatedCompanyStatsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAggregatedCompanyStatsListRequestMultiError) AllErrors() []error { return m }

// GetAggregatedCompanyStatsListRequestValidationError is the validation error
// returned by GetAggregatedCompanyStatsListRequest.Validate if the designated
// constraints aren't met.
type GetAggregatedCompanyStatsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregatedCompanyStatsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregatedCompanyStatsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregatedCompanyStatsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregatedCompanyStatsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregatedCompanyStatsListRequestValidationError) ErrorName() string {
	return "GetAggregatedCompanyStatsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregatedCompanyStatsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregatedCompanyStatsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregatedCompanyStatsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregatedCompanyStatsListRequestValidationError{}

// Validate checks the field values on GetAggregatedCompanyStatsListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAggregatedCompanyStatsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAggregatedCompanyStatsListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAggregatedCompanyStatsListResponseMultiError, or nil if none found.
func (m *GetAggregatedCompanyStatsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAggregatedCompanyStatsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanyStatList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAggregatedCompanyStatsListResponseValidationError{
						field:  fmt.Sprintf("CompanyStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAggregatedCompanyStatsListResponseValidationError{
						field:  fmt.Sprintf("CompanyStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAggregatedCompanyStatsListResponseValidationError{
					field:  fmt.Sprintf("CompanyStatList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.PreviousCursor.(type) {
	case *GetAggregatedCompanyStatsListResponse_PreviousCompanyId:
		if v == nil {
			err := GetAggregatedCompanyStatsListResponseValidationError{
				field:  "PreviousCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PreviousCompanyId
	case *GetAggregatedCompanyStatsListResponse_PreviousCompanyName:
		if v == nil {
			err := GetAggregatedCompanyStatsListResponseValidationError{
				field:  "PreviousCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PreviousCompanyName
	default:
		_ = v // ensures v is used
	}
	switch v := m.NextCursor.(type) {
	case *GetAggregatedCompanyStatsListResponse_NextCompanyId:
		if v == nil {
			err := GetAggregatedCompanyStatsListResponseValidationError{
				field:  "NextCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NextCompanyId
	case *GetAggregatedCompanyStatsListResponse_NextCompanyName:
		if v == nil {
			err := GetAggregatedCompanyStatsListResponseValidationError{
				field:  "NextCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NextCompanyName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAggregatedCompanyStatsListResponseMultiError(errors)
	}

	return nil
}

// GetAggregatedCompanyStatsListResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetAggregatedCompanyStatsListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAggregatedCompanyStatsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAggregatedCompanyStatsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAggregatedCompanyStatsListResponseMultiError) AllErrors() []error { return m }

// GetAggregatedCompanyStatsListResponseValidationError is the validation error
// returned by GetAggregatedCompanyStatsListResponse.Validate if the
// designated constraints aren't met.
type GetAggregatedCompanyStatsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregatedCompanyStatsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregatedCompanyStatsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregatedCompanyStatsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregatedCompanyStatsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregatedCompanyStatsListResponseValidationError) ErrorName() string {
	return "GetAggregatedCompanyStatsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregatedCompanyStatsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregatedCompanyStatsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregatedCompanyStatsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregatedCompanyStatsListResponseValidationError{}

// Validate checks the field values on SearchAggregatedCompanyStatsListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchAggregatedCompanyStatsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchAggregatedCompanyStatsListRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SearchAggregatedCompanyStatsListRequestMultiError, or nil if none found.
func (m *SearchAggregatedCompanyStatsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAggregatedCompanyStatsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilterOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAggregatedCompanyStatsListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAggregatedCompanyStatsListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAggregatedCompanyStatsListRequestValidationError{
				field:  "FilterOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortOrder

	// no validation rules for Offset

	if m.GetLimit() > 100 {
		err := SearchAggregatedCompanyStatsListRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchAggregatedCompanyStatsListRequestMultiError(errors)
	}

	return nil
}

// SearchAggregatedCompanyStatsListRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchAggregatedCompanyStatsListRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchAggregatedCompanyStatsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAggregatedCompanyStatsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAggregatedCompanyStatsListRequestMultiError) AllErrors() []error { return m }

// SearchAggregatedCompanyStatsListRequestValidationError is the validation
// error returned by SearchAggregatedCompanyStatsListRequest.Validate if the
// designated constraints aren't met.
type SearchAggregatedCompanyStatsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAggregatedCompanyStatsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAggregatedCompanyStatsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAggregatedCompanyStatsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAggregatedCompanyStatsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAggregatedCompanyStatsListRequestValidationError) ErrorName() string {
	return "SearchAggregatedCompanyStatsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAggregatedCompanyStatsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAggregatedCompanyStatsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAggregatedCompanyStatsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAggregatedCompanyStatsListRequestValidationError{}

// Validate checks the field values on SearchAggregatedCompanyStatsListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchAggregatedCompanyStatsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchAggregatedCompanyStatsListResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchAggregatedCompanyStatsListResponseMultiError, or nil if none found.
func (m *SearchAggregatedCompanyStatsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAggregatedCompanyStatsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanyStatList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAggregatedCompanyStatsListResponseValidationError{
						field:  fmt.Sprintf("CompanyStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAggregatedCompanyStatsListResponseValidationError{
						field:  fmt.Sprintf("CompanyStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAggregatedCompanyStatsListResponseValidationError{
					field:  fmt.Sprintf("CompanyStatList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCompanyStatCount

	if len(errors) > 0 {
		return SearchAggregatedCompanyStatsListResponseMultiError(errors)
	}

	return nil
}

// SearchAggregatedCompanyStatsListResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchAggregatedCompanyStatsListResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchAggregatedCompanyStatsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAggregatedCompanyStatsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAggregatedCompanyStatsListResponseMultiError) AllErrors() []error { return m }

// SearchAggregatedCompanyStatsListResponseValidationError is the validation
// error returned by SearchAggregatedCompanyStatsListResponse.Validate if the
// designated constraints aren't met.
type SearchAggregatedCompanyStatsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAggregatedCompanyStatsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAggregatedCompanyStatsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAggregatedCompanyStatsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAggregatedCompanyStatsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAggregatedCompanyStatsListResponseValidationError) ErrorName() string {
	return "SearchAggregatedCompanyStatsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAggregatedCompanyStatsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAggregatedCompanyStatsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAggregatedCompanyStatsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAggregatedCompanyStatsListResponseValidationError{}

// Validate checks the field values on
// GetCompanyAggregatedOfferStatsListsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAggregatedOfferStatsListsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCompanyAggregatedOfferStatsListsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCompanyAggregatedOfferStatsListsRequestMultiError, or nil if none found.
func (m *GetCompanyAggregatedOfferStatsListsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAggregatedOfferStatsListsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortOrder

	if m.GetLimit() > 100 {
		err := GetCompanyAggregatedOfferStatsListsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetCompanyAggregatedOfferStatsListsRequest_BaseCurrency_InLookup[m.GetBaseCurrency()]; !ok {
		err := GetCompanyAggregatedOfferStatsListsRequestValidationError{
			field:  "BaseCurrency",
			reason: "value must be in list [USD SGD JPY VND EUR CNY AUD]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Cursor.(type) {
	case *GetCompanyAggregatedOfferStatsListsRequest_LocationId:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsRequestValidationError{
				field:  "Cursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LocationId
	case *GetCompanyAggregatedOfferStatsListsRequest_PositionName:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsRequestValidationError{
				field:  "Cursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PositionName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCompanyAggregatedOfferStatsListsRequestMultiError(errors)
	}

	return nil
}

// GetCompanyAggregatedOfferStatsListsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCompanyAggregatedOfferStatsListsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAggregatedOfferStatsListsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAggregatedOfferStatsListsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAggregatedOfferStatsListsRequestMultiError) AllErrors() []error { return m }

// GetCompanyAggregatedOfferStatsListsRequestValidationError is the validation
// error returned by GetCompanyAggregatedOfferStatsListsRequest.Validate if
// the designated constraints aren't met.
type GetCompanyAggregatedOfferStatsListsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) ErrorName() string {
	return "GetCompanyAggregatedOfferStatsListsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAggregatedOfferStatsListsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAggregatedOfferStatsListsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAggregatedOfferStatsListsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAggregatedOfferStatsListsRequestValidationError{}

var _GetCompanyAggregatedOfferStatsListsRequest_BaseCurrency_InLookup = map[string]struct{}{
	"USD": {},
	"SGD": {},
	"JPY": {},
	"VND": {},
	"EUR": {},
	"CNY": {},
	"AUD": {},
}

// Validate checks the field values on
// GetCompanyAggregatedOfferStatsListsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAggregatedOfferStatsListsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCompanyAggregatedOfferStatsListsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCompanyAggregatedOfferStatsListsResponseMultiError, or nil if none found.
func (m *GetCompanyAggregatedOfferStatsListsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAggregatedOfferStatsListsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOfferStatList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCompanyAggregatedOfferStatsListsResponseValidationError{
						field:  fmt.Sprintf("OfferStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCompanyAggregatedOfferStatsListsResponseValidationError{
						field:  fmt.Sprintf("OfferStatList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyAggregatedOfferStatsListsResponseValidationError{
					field:  fmt.Sprintf("OfferStatList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.PreviousCursor.(type) {
	case *GetCompanyAggregatedOfferStatsListsResponse_PreviousLocationId:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsResponseValidationError{
				field:  "PreviousCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PreviousLocationId
	case *GetCompanyAggregatedOfferStatsListsResponse_PreviousPositionId:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsResponseValidationError{
				field:  "PreviousCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PreviousPositionId
	default:
		_ = v // ensures v is used
	}
	switch v := m.NextCursor.(type) {
	case *GetCompanyAggregatedOfferStatsListsResponse_NextLocationId:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsResponseValidationError{
				field:  "NextCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NextLocationId
	case *GetCompanyAggregatedOfferStatsListsResponse_NextPositionId:
		if v == nil {
			err := GetCompanyAggregatedOfferStatsListsResponseValidationError{
				field:  "NextCursor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NextPositionId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCompanyAggregatedOfferStatsListsResponseMultiError(errors)
	}

	return nil
}

// GetCompanyAggregatedOfferStatsListsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCompanyAggregatedOfferStatsListsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAggregatedOfferStatsListsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAggregatedOfferStatsListsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAggregatedOfferStatsListsResponseMultiError) AllErrors() []error { return m }

// GetCompanyAggregatedOfferStatsListsResponseValidationError is the validation
// error returned by GetCompanyAggregatedOfferStatsListsResponse.Validate if
// the designated constraints aren't met.
type GetCompanyAggregatedOfferStatsListsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) ErrorName() string {
	return "GetCompanyAggregatedOfferStatsListsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAggregatedOfferStatsListsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAggregatedOfferStatsListsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAggregatedOfferStatsListsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAggregatedOfferStatsListsResponseValidationError{}
