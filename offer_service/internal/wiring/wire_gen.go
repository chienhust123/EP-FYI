// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"offer_service/internal/app"
	"offer_service/internal/dataaccess"
	"offer_service/internal/dataaccess/db"
	"offer_service/internal/handlers"
	"offer_service/internal/handlers/grpc"
	"offer_service/internal/handlers/http"
	"offer_service/internal/handlers/s3"
	"offer_service/internal/logic"
	"offer_service/internal/pkg"
	"offer_service/internal/pkg/common"
	"offer_service/internal/pkg/configs"
	"offer_service/internal/pkg/utils"
)

// Injectors from wire.go:

func InitializeStandaloneServer(configFilePath configs.ConfigFilePath, runWithHTTP bool) (*app.StandaloneServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	log := config.Log
	logger, cleanup, err := utils.NewLogger(log)
	if err != nil {
		return nil, nil, err
	}
	server := http.NewServer(config, logger)
	configsGRPC := config.GRPC
	configsS3 := config.S3
	client, err := s3.NewClient(configsS3, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configsDatabase := config.Database
	goquDatabase, cleanup2, err := database.NewClient(configsDatabase, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	companyAccessor := database.NewCompanyAccessor(goquDatabase, logger)
	companyProfileImageAccessor := database.NewCompanyProfileImageAccessor(goquDatabase, logger)
	offerImageAccessor := database.NewOfferImageAccessor(goquDatabase, logger)
	offerAccessor := database.NewOfferAccessor(goquDatabase, logger)
	companyAccessor := database.NewCompanyAccessor(goquDatabase, logger)
	locationAccessor := database.NewLocationAccessor(goquDatabase, logger)
	positionAccessor := database.NewPositionAccessor(goquDatabase, logger)
	idGenerator := common.NewIDGenerator()
	offerManagement, err := logic.NewOfferManagement(config, client, companyProfileImageAccessor, offerImageAccessor, offerAccessor, companyAccessor, locationAccessor, positionAccessor, logger, idGenerator)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	offerCoreServiceServer, err := grpc.NewHandler(configsGRPC, offerManagement)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	grpcServer := grpc.NewServer(configsGRPC, offerCoreServiceServer, logger)
	standaloneServer := app.NewStandaloneServer(server, grpcServer, runWithHTTP, logger)
	return standaloneServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(app.WireSet, handlers.WireSet, pkg.WireSet, logic.WireSet, dataaccess.WireSet)
