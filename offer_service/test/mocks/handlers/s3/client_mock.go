// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source=./client.go -destination=../../../test/mocks/handlers/s3/client_mock.go -package=mocks3client
//

// Package mocks3client is a generated GoMock package.
package mocks3client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateBucketIfNotExists mocks base method.
func (m *MockClient) CreateBucketIfNotExists(ctx context.Context, bucketName, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketIfNotExists", ctx, bucketName, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucketIfNotExists indicates an expected call of CreateBucketIfNotExists.
func (mr *MockClientMockRecorder) CreateBucketIfNotExists(ctx, bucketName, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketIfNotExists", reflect.TypeOf((*MockClient)(nil).CreateBucketIfNotExists), ctx, bucketName, location)
}

// GeneratePresignedUploadURL mocks base method.
func (m *MockClient) GeneratePresignedUploadURL(ctx context.Context, bucketName, key string, expiry time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedUploadURL", ctx, bucketName, key, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedUploadURL indicates an expected call of GeneratePresignedUploadURL.
func (mr *MockClientMockRecorder) GeneratePresignedUploadURL(ctx, bucketName, key, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedUploadURL", reflect.TypeOf((*MockClient)(nil).GeneratePresignedUploadURL), ctx, bucketName, key, expiry)
}
