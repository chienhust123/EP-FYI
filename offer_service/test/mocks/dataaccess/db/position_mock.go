// Code generated by MockGen. DO NOT EDIT.
// Source: ./position.go
//
// Generated by this command:
//
//	mockgen -source=./position.go -destination=../../../test/mocks/dataaccess/db/position_mock.go -package=mockdatabase
//

// Package mockdatabase is a generated GoMock package.
package mockdatabase

import (
	context "context"
	database "offer_service/internal/dataaccess/db"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPositionAccessor is a mock of PositionAccessor interface.
type MockPositionAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockPositionAccessorMockRecorder
}

// MockPositionAccessorMockRecorder is the mock recorder for MockPositionAccessor.
type MockPositionAccessorMockRecorder struct {
	mock *MockPositionAccessor
}

// NewMockPositionAccessor creates a new mock instance.
func NewMockPositionAccessor(ctrl *gomock.Controller) *MockPositionAccessor {
	mock := &MockPositionAccessor{ctrl: ctrl}
	mock.recorder = &MockPositionAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPositionAccessor) EXPECT() *MockPositionAccessorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPositionAccessor) Create(ctx context.Context, offer *database.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPositionAccessorMockRecorder) Create(ctx, offer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPositionAccessor)(nil).Create), ctx, offer)
}

// Delete mocks base method.
func (m *MockPositionAccessor) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPositionAccessorMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPositionAccessor)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockPositionAccessor) GetByID(ctx context.Context, id uint64) (*database.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*database.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPositionAccessorMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPositionAccessor)(nil).GetByID), ctx, id)
}

// GetByTitleLevel mocks base method.
func (m *MockPositionAccessor) GetByTitleLevel(ctx context.Context, title string, level database.PositionLevel) (*database.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitleLevel", ctx, title, level)
	ret0, _ := ret[0].(*database.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitleLevel indicates an expected call of GetByTitleLevel.
func (mr *MockPositionAccessorMockRecorder) GetByTitleLevel(ctx, title, level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitleLevel", reflect.TypeOf((*MockPositionAccessor)(nil).GetByTitleLevel), ctx, title, level)
}

// Update mocks base method.
func (m *MockPositionAccessor) Update(ctx context.Context, offer *database.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPositionAccessorMockRecorder) Update(ctx, offer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPositionAccessor)(nil).Update), ctx, offer)
}
